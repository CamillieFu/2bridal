{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\nvar initMapbox = function initMapbox() {\n  var mapElement = document.getElementById('map');\n\n  if (mapElement) {\n    // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    var map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/dailyuser/ckyxyae0i000o15l0aigldjxp'\n    });\n    var markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach(function (marker) {\n      var popup = new mapboxgl.Popup().setHTML(marker.info_window);\n      var element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundImage = \"url('\".concat(marker.image_url, \"')\");\n      element.style.backgroundSize = 'contain';\n      element.style.width = '40px';\n      element.style.height = '40px';\n      new mapboxgl.Marker(element).setLngLat([marker.lng, marker.lat]).setPopup(popup).addTo(map);\n    });\n    map.addControl(new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken,\n      mapboxgl: mapboxgl\n    }));\n    fitMapToMarkers(map, markers);\n  }\n};\n\nvar fitMapToMarkers = function fitMapToMarkers(map, markers) {\n  var bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(function (marker) {\n    return bounds.extend([marker.lng, marker.lat]);\n  });\n  map.fitBounds(bounds, {\n    padding: 70,\n    maxZoom: 15,\n    duration: 0\n  });\n};\n\nexport { initMapbox };","map":{"version":3,"sources":["/Users/cfujisaki/Desktop/LeWagon/two-bridal/app/javascript/plugins/init_mapbox.js"],"names":["mapboxgl","MapboxGeocoder","initMapbox","mapElement","document","getElementById","accessToken","dataset","mapboxApiKey","map","Map","container","style","markers","JSON","parse","forEach","marker","popup","Popup","setHTML","info_window","element","createElement","className","backgroundImage","image_url","backgroundSize","width","height","Marker","setLngLat","lng","lat","setPopup","addTo","addControl","fitMapToMarkers","bounds","LngLatBounds","extend","fitBounds","padding","maxZoom","duration"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAO,8BAAP;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAnB;;AAEA,MAAIF,UAAJ,EAAgB;AAAE;AAChBH,IAAAA,QAAQ,CAACM,WAAT,GAAuBH,UAAU,CAACI,OAAX,CAAmBC,YAA1C;AAEA,QAAMC,GAAG,GAAG,IAAIT,QAAQ,CAACU,GAAb,CAAiB;AAC3BC,MAAAA,SAAS,EAAE,KADgB;AAE3BC,MAAAA,KAAK,EAAE;AAFoB,KAAjB,CAAZ;AAKA,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWZ,UAAU,CAACI,OAAX,CAAmBM,OAA9B,CAAhB;AACAA,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAACC,MAAD,EAAY;AAC1B,UAAMC,KAAK,GAAG,IAAIlB,QAAQ,CAACmB,KAAb,GAAqBC,OAArB,CAA6BH,MAAM,CAACI,WAApC,CAAd;AAEA,UAAMC,OAAO,GAAGlB,QAAQ,CAACmB,aAAT,CAAuB,KAAvB,CAAhB;AACAD,MAAAA,OAAO,CAACE,SAAR,GAAoB,QAApB;AACAF,MAAAA,OAAO,CAACV,KAAR,CAAca,eAAd,kBAAwCR,MAAM,CAACS,SAA/C;AACAJ,MAAAA,OAAO,CAACV,KAAR,CAAce,cAAd,GAA+B,SAA/B;AACAL,MAAAA,OAAO,CAACV,KAAR,CAAcgB,KAAd,GAAsB,MAAtB;AACAN,MAAAA,OAAO,CAACV,KAAR,CAAciB,MAAd,GAAuB,MAAvB;AAEA,UAAI7B,QAAQ,CAAC8B,MAAb,CAAoBR,OAApB,EACGS,SADH,CACa,CAACd,MAAM,CAACe,GAAR,EAAaf,MAAM,CAACgB,GAApB,CADb,EAEGC,QAFH,CAEYhB,KAFZ,EAGGiB,KAHH,CAGS1B,GAHT;AAID,KAdD;AAgBAA,IAAAA,GAAG,CAAC2B,UAAJ,CAAe,IAAInC,cAAJ,CAAmB;AAChCK,MAAAA,WAAW,EAAEN,QAAQ,CAACM,WADU;AAEhCN,MAAAA,QAAQ,EAAEA;AAFsB,KAAnB,CAAf;AAKAqC,IAAAA,eAAe,CAAC5B,GAAD,EAAMI,OAAN,CAAf;AACD;AACF,CAnCD;;AAqCA,IAAMwB,eAAe,GAAG,SAAlBA,eAAkB,CAAC5B,GAAD,EAAMI,OAAN,EAAkB;AACxC,MAAMyB,MAAM,GAAG,IAAItC,QAAQ,CAACuC,YAAb,EAAf;AACA1B,EAAAA,OAAO,CAACG,OAAR,CAAgB,UAAAC,MAAM;AAAA,WAAIqB,MAAM,CAACE,MAAP,CAAc,CAAEvB,MAAM,CAACe,GAAT,EAAcf,MAAM,CAACgB,GAArB,CAAd,CAAJ;AAAA,GAAtB;AACAxB,EAAAA,GAAG,CAACgC,SAAJ,CAAcH,MAAd,EAAsB;AAAEI,IAAAA,OAAO,EAAE,EAAX;AAAeC,IAAAA,OAAO,EAAE,EAAxB;AAA4BC,IAAAA,QAAQ,EAAE;AAAtC,GAAtB;AACD,CAJD;;AAMA,SAAS1C,UAAT","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n\nconst initMapbox = () => {\n  const mapElement = document.getElementById('map');\n\n  if (mapElement) { // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/dailyuser/ckyxyae0i000o15l0aigldjxp'\n    });\n\n    const markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach((marker) => {\n      const popup = new mapboxgl.Popup().setHTML(marker.info_window);\n\n      const element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundImage = `url('${marker.image_url}')`;\n      element.style.backgroundSize = 'contain';\n      element.style.width = '40px';\n      element.style.height = '40px';\n\n      new mapboxgl.Marker(element)\n        .setLngLat([marker.lng, marker.lat])\n        .setPopup(popup)\n        .addTo(map);\n    });\n\n    map.addControl(new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken,\n      mapboxgl: mapboxgl\n    }));\n\n    fitMapToMarkers(map, markers);\n  }\n};\n\nconst fitMapToMarkers = (map, markers) => {\n  const bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n  map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n};\n\nexport { initMapbox };\n"]},"metadata":{},"sourceType":"module"}